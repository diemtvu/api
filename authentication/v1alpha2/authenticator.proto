// Copyright 2019 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

// $title: Authentication Policy v1alpha2
// $description: Authentication policy for Istio services.
// $location: https://istio.io/docs/reference/config/istio.authentication.v1alpha2.html

package istio.authentication.v1alpha2;

option go_package = "istio.io/api/authentication/v1alpha2";

import "authentication/v1alpha2/mtls_method.proto";
import "authentication/v1alpha2/jwt_method.proto";

// $hide_from_docs
// Authenticator describes the type and parameters needed for that authenticator. Each authenticator
// can be defined in a separate CR (of `authenticator` kind) and referred in the authentication
// policy by name, or defined inline in the policy. Name of the authenticator CR must have prefix
// indicating the type (e.g `mtls`, `jwt` etc).
// Istio will also provide several default authenticators for mTLS, such as `mtls-strict` and
// `mtls-permissive`. This example below is just for illustration of `mtls-strict` authenticator,
// users generally don't have to define it:
//
// ```
// apiVersion: authentication.istio.io/v1alpha2
// kind: Authenticator
// metadata
//   name: mtls-strict
//   namespace: istio-system
// spec:
//   mtls:
//     mode: STRICT
//   principal_type: BOTH
// ```
//
// Here is another example for JWT authenticator.
//
// ```
// apiVersion: authentication.istio.io/v1alpha2
// kind: Authenticator
// metadata
//   name: jwt-my-example
//   namespace: foo
// spec:
//   jwt:
//     issuer: secret@exmaple.com
//     audiences:
//     - bar
//     - baz
//   principal_type: REQUEST
// ```
message Authenticator {
  oneof type {
    // Define mutual TLS authenticator type.
    MutualTls mtls = 1;

    // Define JWT authenticator type.
    Jwt jwt = 2;
  }

  // PrincipalType defines which principal (`source.principal` or `request.auth.principal`)
  // that the authenticator will set if succeeds.
  enum PrincipalType {
    // Sentinel value to make sure the principal type must be set.
    INVALID = 0;
    // Does not set any principal attributes. This is often used to validate extra credentials
    // without changing the principal outputs.
    NONE = 1;
    // Output principal to `source.principal`
    SOURCE = 2;
    // Output principal to `request.auth.principal`
    REQUEST = 3;
    // Output principal to both `source.principal` and `request.auth.principal`.
    BOTH = 4;
  }

  // Defines the principal type that the authenticator will set if succeeds.
  PrincipalType principal_type = 3;
}